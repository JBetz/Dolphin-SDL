| package |
package := Package name: 'LinearAlgebra'.
package paxVersion: 1;
	basicComment: 'Copyright (c) 2002-2004 Robert Jarvis

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'.

package basicPackageVersion: '0.002'.

package classNames
	add: #FloatMatrix;
	add: #IncompatibleMatrixError;
	add: #IncompatibleVectorError;
	add: #LuMatrix;
	add: #Matrix;
	add: #MatrixError;
	add: #NonSquareMatrixError;
	add: #SingularMatrixError;
	add: #Vector;
	add: #VectorError;
	yourself.

package methodNames
	add: #Number -> #divideVector:;
	add: #Number -> #multiplyMatrix:;
	add: #Number -> #multiplyVector:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\..\..\Desktop\Dolphin Images\Browser-39\Core\Object Arts\Dolphin\Base\Dolphin').

package!

"Class Definitions"!

Object subclass: #Matrix
	instanceVariableNames: 'order values luForm comparisonTolerance'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #Vector
	instanceVariableNames: 'values'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Error subclass: #MatrixError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Error subclass: #VectorError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MatrixError subclass: #IncompatibleMatrixError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MatrixError subclass: #NonSquareMatrixError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

MatrixError subclass: #SingularMatrixError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

VectorError subclass: #IncompatibleVectorError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Matrix subclass: #FloatMatrix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Matrix subclass: #LuMatrix
	instanceVariableNames: 'sourceMatrix rowInterchangeSign rowPermutations'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Loose Methods"!

!Number methodsFor!

divideVector: aVector
	^aVector multipliedByScalar: (1 / self)!

multiplyMatrix: aMatrix
	^aMatrix multipliedByScalar: self!

multiplyVector: aVector
	^aVector multipliedByScalar: self! !

!Number categoriesForMethods!
divideVector:!double dispatch!public! !
multiplyMatrix:!double dispatch!private! !
multiplyVector:!double dispatch!private! !
!

"End of package definition"!

